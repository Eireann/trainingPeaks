/* global _rollbar: false */
define(
[
    "jquery",
    "underscore"
],
function(
    $,
    _
)
{
    var _getLastResortStack = function()
    {
        var stack = null;

        try
        {
            throw new Error("Self-caught tracing error");
        }
        catch (e)
        {
            if (e.stack)
                stack = e.stack;
        } 

        return stack;
    };

    var RollbarManager =
    {
        window: null,

        initRollbar: function(_rollbarParams, $, win, doc)
        {
            this._commonInit(_rollbarParams, $, win, doc);
            this._loadRollbarJavascript(_rollbarParams, win, doc);
        },

        initFakeRollbarToConsole: function(_rollbarParams, $, win, doc)
        {
            this._commonInit(_rollbarParams, $, win, doc); 
            this._pushRollbarToConsole(win);
        },

        setUser: function(user)
        {
            var person = {
                id: user.get("userId"),
                username: user.get("userName")
            };
            this._setRollbarParams({ person: person });
        },

        setRoute: function(route)
        {
            this._setRollbarParams({ context: route });
        },

        _setRollbarParams: function(params)
        {
            if (!this.window || !this.window._rollbar)
            {
                return;
            }

            this.window._rollbar.push({ _rollbarParams: params });
        },

        _commonInit: function(_rollbarParams, $, win, doc)
        {
            this._setRollbarParamsOnWindow(_rollbarParams, win);
            this._addErrorHandlerToWindow(win);
            this._addErrorHandlerToAjax($, win, doc); 
            this._addErrorHandlerToJqueryEvents($, win, doc); 
            this.window = win;
        },

        _setRollbarParamsOnWindow: function(_rollbarParams, win)
        {
            _rollbarParams["notifier.snippet_version"] = "2";
            _rollbarParams["notifier.plugins.jquery.version"] = "0.0.1";
            win._rollbar = ["3b4e2366466f45e3b643a7d6b901bf0e", _rollbarParams];
            win._ratchet = _rollbar;
        },

        _loadRollbarJavascript: function(_rollbarParams, win, doc)
        {
            var loadRollbarOnLoad =
                function()
                {
                    var rollbarScriptTag = doc.createElement("script");
                    var firstScriptTag = doc.getElementsByTagName("script")[0];
                    rollbarScriptTag.src =  "//d37gvrvc0wt4s1.cloudfront.net/js/1/rollbar.min.js";
                    rollbarScriptTag.async = false;
                    firstScriptTag.parentNode.insertBefore(rollbarScriptTag, firstScriptTag);
                };

            $(document).ready(loadRollbarOnLoad);
        },

        _addErrorHandlerToWindow: function(win)
        {
            win.onerror = function(error, url, lineNumber)
            {
                // If there is no url, or the url is not on trainingpeaks, 
                // then this error is most likely from an external script or plugin,
                // so ignore it 
                if (!url || !/trainingpeaks\.com/.test(url))
                {
                    return;
                }

                // If they were already wrapped, skip 
                if (/\(rollbared\)/.test(error))
                {
                    return;
                }

                if (error)
                {
                    // If there is an error message, Rollbar won't let us know the error was reported via window.onerror,
                    // so, add this prefix.
                    error = "Via window.onerror: " + error;
                }
               
                var lastResortStack = _getLastResortStack();
                if (lastResortStack)
                    error += ": \n" + lastResortStack;

                // Push them to rollbar array or rollbar client
                this._rollbar.push(
                    {
                        _t: 'uncaught',
                        e: error,
                        u: url,
                        l: lineNumber
                    }
                );
            };
        },

        _addErrorHandlerToAjax: function($, win, doc)
        {
            $(doc).ajaxError(
                function(event, xhr, options, error)
                {
                    // 1)
                    // AJAX requests generated by jQuery may fail without server interaction.
                    // In those instances, 'xhr.status' will be 0. We do want to forward to Rollbar such errors,
                    // as they would only pollute our error reports.
                    // 2)
                    // Do not report "No Content", "Unauthorized" and "Payment Required" to Rollbar.
                    if (_.contains([0, 204, 401, 402], xhr.status))
                    {
                        return;
                    } 

                    // Allow to ignore certain request errors
                    if (options.rollbarIgnore)
                    {
                        return;
                    }

                    var request =
                        {
                            url: options.url,
                            type: options.type,
                            body: options.data ? options.data : ""
                        };

                    win._rollbar.push(
                        {
                            level:"warning",
                            msg: "jQuery ajax error for url "+ options.url,
                            jquery_status: xhr.status,
                            jquery_url: options.url,
                            jquery_thrown_error: error,
                            jquery_ajax_error: true,
                            request: request,
                            custom: xhr.responseText
                        }
                    );
                }
            );
        },

        _addErrorHandlerToJqueryEvents: function($, win, doc)
        {
            var originalJqueryReady = $.fn.ready;

            $.fn.ready = function(callback)
            {
                return originalJqueryReady.call(
                    this,
                    function()
                    {
                        try
                        {
                            callback();
                        } catch(err) {
                            win._rollbar.push(err);
                        }
                    }
                );
            };

            var wrappedFunctionRegistry = {};
 
            // replace jquery.on with a wrollbar wrapping version 
            var originalJqueryOn = $.fn.on;

            $.fn.on = function(events, e, t, u, z)
            {
                // wrap a function with a try catch to log errors to rollbar
                var wrapWithRollbar = function(callback)
                {
                    var wrappedFunction = function()
                    {
                        try
                        {
                            return callback.apply(this, arguments);
                        } catch(err)
                        {
                            win._rollbar.push(err);
                            return null;
                        }
                    };

                    wrappedFunctionRegistry[callback] = wrappedFunction;

                    return wrappedFunction;
                };

                // figure out which of the jquery.on arguments is the actual callback and wrap it
                if (e && typeof e === "function")
                {
                    e = wrapWithRollbar(e);
                }
                else if (t && typeof t === "function")
                {
                    t = wrapWithRollbar(t);
                }
                else if(u && typeof u === "function")
                {
                    u = wrapWithRollbar(u);
                }

                // call the original jquery.on with the now wrapped callback
                return originalJqueryOn.call(this, events, e, t, u, z);
            };

            // unwrap the wrapped callbacks and call jquery off
            var originalJqueryOff = $.fn.off;

            $.fn.off = function(events, n, e)
            {
                if (n && typeof n === "function")
                {
                    n = wrappedFunctionRegistry[n];
                    delete wrappedFunctionRegistry[n];
                }
                else
                {
                    e = wrappedFunctionRegistry[e];
                    delete wrappedFunctionRegistry[e];
                }

                return originalJqueryOff.call(this, events, n, e);
            };
        },

        // logs all rollbars to console, and keeps them in window._rollbar array so we can inspect them
        _pushRollbarToConsole: function(win)
        {
            var logToConsole = function()
            {
                console.log("Rollbar: ");
                _.each(
                    arguments,
                    function(item)
                    {
                        console.log(item);
                        if (item.hasOwnProperty("stack"))
                        {
                            console.log(item.stack);
                        }
                        else
                        {
                            var lastResortStack = _getLastResortStack();
                            if (lastResortStack)
                                console.log(lastResortStack);
                        }
                    }
                );
            };

            win._rollbar.push = function()
            {
                Array.prototype.push.apply(this, arguments);
                logToConsole.apply(this, arguments);
            };

            win._rollbar.last = function()
            {
                return this[this.length - 1];
            };

            // log anything that was already on rollbar array
            _.each(
                win._rollbar,
                function(item)
                {
                    logToConsole(item);
                }
            );
        }
    };

    return RollbarManager;
});
