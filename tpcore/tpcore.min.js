!function(){function a(a,c,d){if(!b.components[c])throw Error("Unknown component: "+c)
var e=a.data("tp."+c)
return e||(e=b.components[c](a,d),a.data("tp."+c,e)),e}var b=window.TP={}
b.utils={},b.components={},$.fn.tp=function(){var b=arguments[0],c=[].slice.call(arguments,1)
if(_.isString(c[0]))var d=c.shift()
var e,f=c[0]||{}
return this.each(function(g,h){var i=$(h),j=a(i,b,f)
d&&(e=j[d].apply(j,c))}),void 0===e?this:e},$.ajaxSetup({xhrFields:{withCredentials:!0}}),$.ajaxPrefilter(function(a){if(/^.*!API!/.test(a.url)){var b=window.apiConfig&&window.apiConfig.apiRoot
a.url=a.url.replace(/.*!API!/,b)}})
var c={1:"Swim",2:"Bike",3:"Run",4:"Brick",5:"Crosstrain",6:"Race",7:"Day Off",8:"Mountain Bike",9:"Strength",10:"Custom",11:"XC-Ski",12:"Rowing",13:"Walk",100:"Other"}
b.utils.lookupSportType=function(a){return c[a]}}(),function(){var a=_.template(["<section>","<h3>Workout #<%= index + 1 %>: <%= TP.utils.lookupSportType(workout.workoutTypeValueId) %></h3>","<% if(workout.totalTimePlanned) { %><p>Planned Time: <%= TP.utils.format('h', 's', workout.totalTimePlanned) %></p><% } %>","<% if(workout.distancePlanned) { %><p>Planned Distance: <%= TP.utils.format('m', 'mi', workout.distancePlanned) %></p><% } %>","<p><%= workout.description %></p>","</section>"].join("")),b=Backbone.Model.extend({url:function(){return"//!API!/plans/v1/plans/"+this.id+"/preview"}}),c=Backbone.View.extend({initialize:function(){this.xhr=this.model.fetch(),this.xhr.always(_.bind(this.render,this)),this.render()},render:function(){switch(this.xhr.state()){case"resolved":this.display(),this.plot()
break
case"rejected":this.$el.html("Error!")
break
case"pending":this.$el.html("Loading&hellip;")}},display:function(){var b=["<div class='plot'></div>","<h2>Sample Workouts:</h2>",_.map(this.model.get("workoutPreviews"),function(b,c){return a({workout:b,index:c})}).join("")].join("")
this.$el.html(b)},plot:function(){if(this.$el.has(".plot")){var a=[{data:_.map(this.model.get("trainingDistanceByWeek"),function(a,b){return[b+1,TP.utils.convert("m","mi",a)]}),yaxis:1},{data:_.map(this.model.get("trainingDurationByWeek"),function(a,b){return[b+1,TP.utils.convert("h","min",a)]}),yaxis:2}]
a=_.select(a,function(a){return _.any(a.data,function(a){return a[1]})})
var b={xaxis:{tickSize:1,tickDecimals:0},yaxes:[{min:0,tickFormatter:function(a){return TP.utils.format("mi","mi",a)}},{min:0,tickFormatter:function(a){return TP.utils.format("min","min",a)}}]}
this.$(".plot").width("100%").height("300px").plot(a,b)}}})
TP.components.planpreview=function(a){var d=new b({id:$(a).data("plan-id")})
return new c({model:d,el:a})}}(),function(){function a(a,b,c){if(a="string"==typeof a?h[a]:a,b="string"==typeof b?h[b]:b||h[a.base],!a||!b||a.base!==b.base)throw Error("Invalid conversion")
return c*a.factor/b.factor}function b(a,b){var c=Math.max(0,Math.ceil(Math.log(Math.abs(b))/Math.LN10)),d=Math.pow(10,a-c)
return Math.round(b*d)/d}function c(a,c){var d=Math.max(1,Math.ceil(Math.log(Math.abs(c))/Math.LN10)),e=Math.max(a,d)
return b(e,c)}function d(b,d,e,f){from_="string"==typeof b?h[b]:b,to_="string"==typeof d?h[d]:d||h[from_.base],e=a(from_,to_,e,f)
var g=to_.format?to_.format(e,f):c(3,e).toString(),i="label"in to_?to_.label:d
return i&&(g+=" "+i),g}function e(a,b){function c(a){var b=a.toString()
return b.length<2?"0"+b:b}var d=Math.floor(a/3600),e=Math.floor(a/60)%60,f=Math.floor(a)%60,g=d.toString()+":"+c(e)
return b&&b.seconds&&(g+=":"+c(f)),g}function f(a,b){return e(a,_.extend({seconds:!0},b))}function g(a,b){return e(60*a,_.extend({seconds:!1},b))}var h={m:{base:"m",factor:1},mi:{base:"m",factor:1609.34},km:{base:"m",factor:1e3},s:{base:"s",factor:1,format:f,label:""},min:{base:"s",factor:60,format:g,label:""},h:{base:"s",factor:3600}}
TP.utils.convert=a,TP.utils.format=d}()

//# sourceMappingURL=tpcore.min.js.map